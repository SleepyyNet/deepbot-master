// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.modules.Controller.ControllerDevice;

/**
 * 调用设备控制需要的参数
 **/
public class ControllerObj implements java.lang.Cloneable, java.io.Serializable
{
    public int result;

    /**
     * 家庭区域id
     **/
    public String positionId;

    /**
     * 账号
     **/
    public String account;

    /**
     * 家庭组编号
     **/
    public String groupId;

    /**
     * 设备编号
     **/
    public String deviceId;

    /**
     * 操作类型
     **/
    public String operateType;

    /**
     * 操作值
     **/
    public String operateValue;

    public ControllerObj()
    {
        positionId = "";
        account = "";
        groupId = "";
        deviceId = "";
        operateType = "";
        operateValue = "";
    }

    public ControllerObj(int result, String positionId, String account, String groupId, String deviceId, String operateType, String operateValue)
    {
        this.result = result;
        this.positionId = positionId;
        this.account = account;
        this.groupId = groupId;
        this.deviceId = deviceId;
        this.operateType = operateType;
        this.operateValue = operateValue;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ControllerObj _r = null;
        if(rhs instanceof ControllerObj)
        {
            _r = (ControllerObj)rhs;
        }

        if(_r != null)
        {
            if(result != _r.result)
            {
                return false;
            }
            if(positionId != _r.positionId)
            {
                if(positionId == null || _r.positionId == null || !positionId.equals(_r.positionId))
                {
                    return false;
                }
            }
            if(account != _r.account)
            {
                if(account == null || _r.account == null || !account.equals(_r.account))
                {
                    return false;
                }
            }
            if(groupId != _r.groupId)
            {
                if(groupId == null || _r.groupId == null || !groupId.equals(_r.groupId))
                {
                    return false;
                }
            }
            if(deviceId != _r.deviceId)
            {
                if(deviceId == null || _r.deviceId == null || !deviceId.equals(_r.deviceId))
                {
                    return false;
                }
            }
            if(operateType != _r.operateType)
            {
                if(operateType == null || _r.operateType == null || !operateType.equals(_r.operateType))
                {
                    return false;
                }
            }
            if(operateValue != _r.operateValue)
            {
                if(operateValue == null || _r.operateValue == null || !operateValue.equals(_r.operateValue))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::ControllerDevice::ControllerObj");
        __h = IceInternal.HashUtil.hashAdd(__h, result);
        __h = IceInternal.HashUtil.hashAdd(__h, positionId);
        __h = IceInternal.HashUtil.hashAdd(__h, account);
        __h = IceInternal.HashUtil.hashAdd(__h, groupId);
        __h = IceInternal.HashUtil.hashAdd(__h, deviceId);
        __h = IceInternal.HashUtil.hashAdd(__h, operateType);
        __h = IceInternal.HashUtil.hashAdd(__h, operateValue);
        return __h;
    }

    public ControllerObj
    clone()
    {
        ControllerObj c = null;
        try
        {
            c = (ControllerObj)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(result);
        __os.writeString(positionId);
        __os.writeString(account);
        __os.writeString(groupId);
        __os.writeString(deviceId);
        __os.writeString(operateType);
        __os.writeString(operateValue);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        result = __is.readInt();
        positionId = __is.readString();
        account = __is.readString();
        groupId = __is.readString();
        deviceId = __is.readString();
        operateType = __is.readString();
        operateValue = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, ControllerObj __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ControllerObj
    __read(IceInternal.BasicStream __is, ControllerObj __v)
    {
        if(__v == null)
        {
             __v = new ControllerObj();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ControllerObj __nullMarshalValue = new ControllerObj();

    public static final long serialVersionUID = -4880961769928131077L;
}

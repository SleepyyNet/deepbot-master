// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `AICall.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.modules.AICall.AICall;

/**
 * 调用TTS需要的参数
 **/
public class SayObj implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 唤醒日志id
     **/
    public String wakeLogId;

    /**
     * 会话id
     **/
    public String talkSessionId;

    /**
     * 说话即休眠1  连续监听0
     **/
    public int isStop;

    /**
     * android端预留字段 聊天为1  其他为0
     **/
    public int isChat;

    /**
     * TTS播报的文本
     **/
    public String sayingText;

    /**
     * 设备号
     **/
    public String sn;

    /**
     * 结果编号 预留字段
     **/
    public int result;

    /**
     * 附加参数(json)
     **/
    public String attachParam;

    /**
     * 响应设备号
     **/
    public String responseSn;

    public SayObj()
    {
        wakeLogId = "";
        talkSessionId = "";
        sayingText = "";
        sn = "";
        attachParam = "";
        responseSn = "";
    }

    public SayObj(String wakeLogId, String talkSessionId, int isStop, int isChat, String sayingText, String sn, int result, String attachParam, String responseSn)
    {
        this.wakeLogId = wakeLogId;
        this.talkSessionId = talkSessionId;
        this.isStop = isStop;
        this.isChat = isChat;
        this.sayingText = sayingText;
        this.sn = sn;
        this.result = result;
        this.attachParam = attachParam;
        this.responseSn = responseSn;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SayObj _r = null;
        if(rhs instanceof SayObj)
        {
            _r = (SayObj)rhs;
        }

        if(_r != null)
        {
            if(wakeLogId != _r.wakeLogId)
            {
                if(wakeLogId == null || _r.wakeLogId == null || !wakeLogId.equals(_r.wakeLogId))
                {
                    return false;
                }
            }
            if(talkSessionId != _r.talkSessionId)
            {
                if(talkSessionId == null || _r.talkSessionId == null || !talkSessionId.equals(_r.talkSessionId))
                {
                    return false;
                }
            }
            if(isStop != _r.isStop)
            {
                return false;
            }
            if(isChat != _r.isChat)
            {
                return false;
            }
            if(sayingText != _r.sayingText)
            {
                if(sayingText == null || _r.sayingText == null || !sayingText.equals(_r.sayingText))
                {
                    return false;
                }
            }
            if(sn != _r.sn)
            {
                if(sn == null || _r.sn == null || !sn.equals(_r.sn))
                {
                    return false;
                }
            }
            if(result != _r.result)
            {
                return false;
            }
            if(attachParam != _r.attachParam)
            {
                if(attachParam == null || _r.attachParam == null || !attachParam.equals(_r.attachParam))
                {
                    return false;
                }
            }
            if(responseSn != _r.responseSn)
            {
                if(responseSn == null || _r.responseSn == null || !responseSn.equals(_r.responseSn))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::AICall::SayObj");
        __h = IceInternal.HashUtil.hashAdd(__h, wakeLogId);
        __h = IceInternal.HashUtil.hashAdd(__h, talkSessionId);
        __h = IceInternal.HashUtil.hashAdd(__h, isStop);
        __h = IceInternal.HashUtil.hashAdd(__h, isChat);
        __h = IceInternal.HashUtil.hashAdd(__h, sayingText);
        __h = IceInternal.HashUtil.hashAdd(__h, sn);
        __h = IceInternal.HashUtil.hashAdd(__h, result);
        __h = IceInternal.HashUtil.hashAdd(__h, attachParam);
        __h = IceInternal.HashUtil.hashAdd(__h, responseSn);
        return __h;
    }

    public SayObj
    clone()
    {
        SayObj c = null;
        try
        {
            c = (SayObj)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(wakeLogId);
        __os.writeString(talkSessionId);
        __os.writeInt(isStop);
        __os.writeInt(isChat);
        __os.writeString(sayingText);
        __os.writeString(sn);
        __os.writeInt(result);
        __os.writeString(attachParam);
        __os.writeString(responseSn);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        wakeLogId = __is.readString();
        talkSessionId = __is.readString();
        isStop = __is.readInt();
        isChat = __is.readInt();
        sayingText = __is.readString();
        sn = __is.readString();
        result = __is.readInt();
        attachParam = __is.readString();
        responseSn = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, SayObj __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public SayObj
    __read(IceInternal.BasicStream __is, SayObj __v)
    {
        if(__v == null)
        {
             __v = new SayObj();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final SayObj __nullMarshalValue = new SayObj();

    public static final long serialVersionUID = -1816853724L;
}

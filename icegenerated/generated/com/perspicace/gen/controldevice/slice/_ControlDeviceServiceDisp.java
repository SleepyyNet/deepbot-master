// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ai_controldevice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.gen.controldevice.slice;

/**
 * 场景服务
 **/
public abstract class _ControlDeviceServiceDisp extends Ice.ObjectImpl implements ControlDeviceService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::slice::ControlDeviceService"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String controlDevice(String text, String intent, java.util.Map<java.lang.String, java.lang.String> entityMap, String suggest, String smartDeviceId, String groupId)
        throws slice.NoAreaException
    {
        return controlDevice(text, intent, entityMap, suggest, smartDeviceId, groupId, null);
    }

    public final String runScene(String text, String groupId, String sceneMode, String sn, String deviceid)
    {
        return runScene(text, groupId, sceneMode, sn, deviceid, null);
    }

    public static Ice.DispatchStatus ___controlDevice(ControlDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String text;
        String intent;
        java.util.Map<java.lang.String, java.lang.String> entityMap;
        String suggest;
        String smartDeviceId;
        String groupId;
        text = __is.readString();
        intent = __is.readString();
        entityMap = EntityMapHelper.read(__is);
        suggest = __is.readString();
        smartDeviceId = __is.readString();
        groupId = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.controlDevice(text, intent, entityMap, suggest, smartDeviceId, groupId, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(slice.NoAreaException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___runScene(ControlDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String text;
        String groupId;
        String sceneMode;
        String sn;
        String deviceid;
        text = __is.readString();
        groupId = __is.readString();
        sceneMode = __is.readString();
        sn = __is.readString();
        deviceid = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.runScene(text, groupId, sceneMode, sn, deviceid, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "controlDevice",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "runScene"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___controlDevice(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___runScene(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `thirdparty.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.gen.thirdparty.slice;

/**
 * 股票数据
 **/
public class SharesData implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 股票编码
     **/
    public String code;

    /**
     * 股票名字
     **/
    public String name;

    /**
     * 当前价格
     **/
    public String nowPrice;

    /**
     * 涨跌幅
     **/
    public String diffRate;

    /**
     * 涨跌额
     **/
    public String diffMoney;

    /**
     * 昨日收盘价
     **/
    public String yestodayClosePrice;

    /**
     * 今天最高
     **/
    public String todayMax;

    /**
     * 今天最低
     **/
    public String todayMin;

    /**
     * 换手率
     **/
    public String turnover;

    /**
     * 成交量
     **/
    public String tradeNum;

    /**
     * 成交额
     **/
    public String tradeAmount;

    /**
     * 开盘价格
     **/
    public String openPrice;

    public SharesData()
    {
        code = "";
        name = "";
        nowPrice = "";
        diffRate = "";
        diffMoney = "";
        yestodayClosePrice = "";
        todayMax = "";
        todayMin = "";
        turnover = "";
        tradeNum = "";
        tradeAmount = "";
        openPrice = "";
    }

    public SharesData(String code, String name, String nowPrice, String diffRate, String diffMoney, String yestodayClosePrice, String todayMax, String todayMin, String turnover, String tradeNum, String tradeAmount, String openPrice)
    {
        this.code = code;
        this.name = name;
        this.nowPrice = nowPrice;
        this.diffRate = diffRate;
        this.diffMoney = diffMoney;
        this.yestodayClosePrice = yestodayClosePrice;
        this.todayMax = todayMax;
        this.todayMin = todayMin;
        this.turnover = turnover;
        this.tradeNum = tradeNum;
        this.tradeAmount = tradeAmount;
        this.openPrice = openPrice;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SharesData _r = null;
        if(rhs instanceof SharesData)
        {
            _r = (SharesData)rhs;
        }

        if(_r != null)
        {
            if(code != _r.code)
            {
                if(code == null || _r.code == null || !code.equals(_r.code))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(nowPrice != _r.nowPrice)
            {
                if(nowPrice == null || _r.nowPrice == null || !nowPrice.equals(_r.nowPrice))
                {
                    return false;
                }
            }
            if(diffRate != _r.diffRate)
            {
                if(diffRate == null || _r.diffRate == null || !diffRate.equals(_r.diffRate))
                {
                    return false;
                }
            }
            if(diffMoney != _r.diffMoney)
            {
                if(diffMoney == null || _r.diffMoney == null || !diffMoney.equals(_r.diffMoney))
                {
                    return false;
                }
            }
            if(yestodayClosePrice != _r.yestodayClosePrice)
            {
                if(yestodayClosePrice == null || _r.yestodayClosePrice == null || !yestodayClosePrice.equals(_r.yestodayClosePrice))
                {
                    return false;
                }
            }
            if(todayMax != _r.todayMax)
            {
                if(todayMax == null || _r.todayMax == null || !todayMax.equals(_r.todayMax))
                {
                    return false;
                }
            }
            if(todayMin != _r.todayMin)
            {
                if(todayMin == null || _r.todayMin == null || !todayMin.equals(_r.todayMin))
                {
                    return false;
                }
            }
            if(turnover != _r.turnover)
            {
                if(turnover == null || _r.turnover == null || !turnover.equals(_r.turnover))
                {
                    return false;
                }
            }
            if(tradeNum != _r.tradeNum)
            {
                if(tradeNum == null || _r.tradeNum == null || !tradeNum.equals(_r.tradeNum))
                {
                    return false;
                }
            }
            if(tradeAmount != _r.tradeAmount)
            {
                if(tradeAmount == null || _r.tradeAmount == null || !tradeAmount.equals(_r.tradeAmount))
                {
                    return false;
                }
            }
            if(openPrice != _r.openPrice)
            {
                if(openPrice == null || _r.openPrice == null || !openPrice.equals(_r.openPrice))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::slice::SharesData");
        __h = IceInternal.HashUtil.hashAdd(__h, code);
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, nowPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, diffRate);
        __h = IceInternal.HashUtil.hashAdd(__h, diffMoney);
        __h = IceInternal.HashUtil.hashAdd(__h, yestodayClosePrice);
        __h = IceInternal.HashUtil.hashAdd(__h, todayMax);
        __h = IceInternal.HashUtil.hashAdd(__h, todayMin);
        __h = IceInternal.HashUtil.hashAdd(__h, turnover);
        __h = IceInternal.HashUtil.hashAdd(__h, tradeNum);
        __h = IceInternal.HashUtil.hashAdd(__h, tradeAmount);
        __h = IceInternal.HashUtil.hashAdd(__h, openPrice);
        return __h;
    }

    public SharesData
    clone()
    {
        SharesData c = null;
        try
        {
            c = (SharesData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(code);
        __os.writeString(name);
        __os.writeString(nowPrice);
        __os.writeString(diffRate);
        __os.writeString(diffMoney);
        __os.writeString(yestodayClosePrice);
        __os.writeString(todayMax);
        __os.writeString(todayMin);
        __os.writeString(turnover);
        __os.writeString(tradeNum);
        __os.writeString(tradeAmount);
        __os.writeString(openPrice);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        code = __is.readString();
        name = __is.readString();
        nowPrice = __is.readString();
        diffRate = __is.readString();
        diffMoney = __is.readString();
        yestodayClosePrice = __is.readString();
        todayMax = __is.readString();
        todayMin = __is.readString();
        turnover = __is.readString();
        tradeNum = __is.readString();
        tradeAmount = __is.readString();
        openPrice = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, SharesData __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public SharesData
    __read(IceInternal.BasicStream __is, SharesData __v)
    {
        if(__v == null)
        {
             __v = new SharesData();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final SharesData __nullMarshalValue = new SharesData();

    public static final long serialVersionUID = 1494216555L;
}

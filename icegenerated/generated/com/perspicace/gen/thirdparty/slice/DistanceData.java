// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `thirdparty.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.gen.thirdparty.slice;

/**
 * 路况数据
 **/
public class DistanceData implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 起点
     **/
    public String start;

    /**
     * 终点
     **/
    public String end;

    /**
     * 距离(单位为千米)
     **/
    public int distance;

    /**
     * 时间（单位为分钟）
     **/
    public int duration;

    /**
     * 起点坐标
     **/
    public String startPos;

    /**
     * 终点坐标
     **/
    public String endPos;

    public DistanceData()
    {
        start = "";
        end = "";
        startPos = "";
        endPos = "";
    }

    public DistanceData(String start, String end, int distance, int duration, String startPos, String endPos)
    {
        this.start = start;
        this.end = end;
        this.distance = distance;
        this.duration = duration;
        this.startPos = startPos;
        this.endPos = endPos;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DistanceData _r = null;
        if(rhs instanceof DistanceData)
        {
            _r = (DistanceData)rhs;
        }

        if(_r != null)
        {
            if(start != _r.start)
            {
                if(start == null || _r.start == null || !start.equals(_r.start))
                {
                    return false;
                }
            }
            if(end != _r.end)
            {
                if(end == null || _r.end == null || !end.equals(_r.end))
                {
                    return false;
                }
            }
            if(distance != _r.distance)
            {
                return false;
            }
            if(duration != _r.duration)
            {
                return false;
            }
            if(startPos != _r.startPos)
            {
                if(startPos == null || _r.startPos == null || !startPos.equals(_r.startPos))
                {
                    return false;
                }
            }
            if(endPos != _r.endPos)
            {
                if(endPos == null || _r.endPos == null || !endPos.equals(_r.endPos))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::slice::DistanceData");
        __h = IceInternal.HashUtil.hashAdd(__h, start);
        __h = IceInternal.HashUtil.hashAdd(__h, end);
        __h = IceInternal.HashUtil.hashAdd(__h, distance);
        __h = IceInternal.HashUtil.hashAdd(__h, duration);
        __h = IceInternal.HashUtil.hashAdd(__h, startPos);
        __h = IceInternal.HashUtil.hashAdd(__h, endPos);
        return __h;
    }

    public DistanceData
    clone()
    {
        DistanceData c = null;
        try
        {
            c = (DistanceData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(start);
        __os.writeString(end);
        __os.writeInt(distance);
        __os.writeInt(duration);
        __os.writeString(startPos);
        __os.writeString(endPos);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        start = __is.readString();
        end = __is.readString();
        distance = __is.readInt();
        duration = __is.readInt();
        startPos = __is.readString();
        endPos = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, DistanceData __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public DistanceData
    __read(IceInternal.BasicStream __is, DistanceData __v)
    {
        if(__v == null)
        {
             __v = new DistanceData();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final DistanceData __nullMarshalValue = new DistanceData();

    public static final long serialVersionUID = 2184955224238115445L;
}

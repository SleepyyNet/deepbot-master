// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `thirdparty.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.gen.thirdparty.slice;

/**
 * 天气天数据
 **/
public class DayWeatherData implements java.lang.Cloneable, java.io.Serializable
{
    public String dayWeatherCode;

    public String dayAirTemperature;

    public String nightAirTemperature;

    public String dayWeatherName;

    public String day;

    public WeatherIndexData index;

    public String dayWindPower;

    public String nightWindPower;

    public String dayWindDirection;

    public String nightWindDirection;

    public DayWeatherData()
    {
        dayWeatherCode = "";
        dayAirTemperature = "";
        nightAirTemperature = "";
        dayWeatherName = "";
        day = "";
        index = new WeatherIndexData();
        dayWindPower = "";
        nightWindPower = "";
        dayWindDirection = "";
        nightWindDirection = "";
    }

    public DayWeatherData(String dayWeatherCode, String dayAirTemperature, String nightAirTemperature, String dayWeatherName, String day, WeatherIndexData index, String dayWindPower, String nightWindPower, String dayWindDirection, String nightWindDirection)
    {
        this.dayWeatherCode = dayWeatherCode;
        this.dayAirTemperature = dayAirTemperature;
        this.nightAirTemperature = nightAirTemperature;
        this.dayWeatherName = dayWeatherName;
        this.day = day;
        this.index = index;
        this.dayWindPower = dayWindPower;
        this.nightWindPower = nightWindPower;
        this.dayWindDirection = dayWindDirection;
        this.nightWindDirection = nightWindDirection;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DayWeatherData _r = null;
        if(rhs instanceof DayWeatherData)
        {
            _r = (DayWeatherData)rhs;
        }

        if(_r != null)
        {
            if(dayWeatherCode != _r.dayWeatherCode)
            {
                if(dayWeatherCode == null || _r.dayWeatherCode == null || !dayWeatherCode.equals(_r.dayWeatherCode))
                {
                    return false;
                }
            }
            if(dayAirTemperature != _r.dayAirTemperature)
            {
                if(dayAirTemperature == null || _r.dayAirTemperature == null || !dayAirTemperature.equals(_r.dayAirTemperature))
                {
                    return false;
                }
            }
            if(nightAirTemperature != _r.nightAirTemperature)
            {
                if(nightAirTemperature == null || _r.nightAirTemperature == null || !nightAirTemperature.equals(_r.nightAirTemperature))
                {
                    return false;
                }
            }
            if(dayWeatherName != _r.dayWeatherName)
            {
                if(dayWeatherName == null || _r.dayWeatherName == null || !dayWeatherName.equals(_r.dayWeatherName))
                {
                    return false;
                }
            }
            if(day != _r.day)
            {
                if(day == null || _r.day == null || !day.equals(_r.day))
                {
                    return false;
                }
            }
            if(index != _r.index)
            {
                if(index == null || _r.index == null || !index.equals(_r.index))
                {
                    return false;
                }
            }
            if(dayWindPower != _r.dayWindPower)
            {
                if(dayWindPower == null || _r.dayWindPower == null || !dayWindPower.equals(_r.dayWindPower))
                {
                    return false;
                }
            }
            if(nightWindPower != _r.nightWindPower)
            {
                if(nightWindPower == null || _r.nightWindPower == null || !nightWindPower.equals(_r.nightWindPower))
                {
                    return false;
                }
            }
            if(dayWindDirection != _r.dayWindDirection)
            {
                if(dayWindDirection == null || _r.dayWindDirection == null || !dayWindDirection.equals(_r.dayWindDirection))
                {
                    return false;
                }
            }
            if(nightWindDirection != _r.nightWindDirection)
            {
                if(nightWindDirection == null || _r.nightWindDirection == null || !nightWindDirection.equals(_r.nightWindDirection))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::slice::DayWeatherData");
        __h = IceInternal.HashUtil.hashAdd(__h, dayWeatherCode);
        __h = IceInternal.HashUtil.hashAdd(__h, dayAirTemperature);
        __h = IceInternal.HashUtil.hashAdd(__h, nightAirTemperature);
        __h = IceInternal.HashUtil.hashAdd(__h, dayWeatherName);
        __h = IceInternal.HashUtil.hashAdd(__h, day);
        __h = IceInternal.HashUtil.hashAdd(__h, index);
        __h = IceInternal.HashUtil.hashAdd(__h, dayWindPower);
        __h = IceInternal.HashUtil.hashAdd(__h, nightWindPower);
        __h = IceInternal.HashUtil.hashAdd(__h, dayWindDirection);
        __h = IceInternal.HashUtil.hashAdd(__h, nightWindDirection);
        return __h;
    }

    public DayWeatherData
    clone()
    {
        DayWeatherData c = null;
        try
        {
            c = (DayWeatherData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(dayWeatherCode);
        __os.writeString(dayAirTemperature);
        __os.writeString(nightAirTemperature);
        __os.writeString(dayWeatherName);
        __os.writeString(day);
        WeatherIndexData.__write(__os, index);
        __os.writeString(dayWindPower);
        __os.writeString(nightWindPower);
        __os.writeString(dayWindDirection);
        __os.writeString(nightWindDirection);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        dayWeatherCode = __is.readString();
        dayAirTemperature = __is.readString();
        nightAirTemperature = __is.readString();
        dayWeatherName = __is.readString();
        day = __is.readString();
        index = WeatherIndexData.__read(__is, index);
        dayWindPower = __is.readString();
        nightWindPower = __is.readString();
        dayWindDirection = __is.readString();
        nightWindDirection = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, DayWeatherData __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public DayWeatherData
    __read(IceInternal.BasicStream __is, DayWeatherData __v)
    {
        if(__v == null)
        {
             __v = new DayWeatherData();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final DayWeatherData __nullMarshalValue = new DayWeatherData();

    public static final long serialVersionUID = -7458847078749020121L;
}

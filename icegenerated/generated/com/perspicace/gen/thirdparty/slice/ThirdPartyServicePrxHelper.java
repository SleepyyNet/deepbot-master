// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `thirdparty.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.perspicace.gen.thirdparty.slice;

/**
 * Provides type-specific helper functions.
 **/
public final class ThirdPartyServicePrxHelper extends Ice.ObjectPrxHelperBase implements ThirdPartyServicePrx
{
    private static final String __getDistanceInfo_name = "getDistanceInfo";

    public DistanceData getDistanceInfo(String cityName, String startPlace, String destination)
        throws slice.BussinessServiceException
    {
        return getDistanceInfo(cityName, startPlace, destination, null, false);
    }

    public DistanceData getDistanceInfo(String cityName, String startPlace, String destination, java.util.Map<String, String> __ctx)
        throws slice.BussinessServiceException
    {
        return getDistanceInfo(cityName, startPlace, destination, __ctx, true);
    }

    private DistanceData getDistanceInfo(String cityName, String startPlace, String destination, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws slice.BussinessServiceException
    {
        __checkTwowayOnly(__getDistanceInfo_name);
        return end_getDistanceInfo(begin_getDistanceInfo(cityName, startPlace, destination, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, null, false, false, null);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination, java.util.Map<String, String> __ctx)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination, Ice.Callback __cb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination, Callback_ThirdPartyService_getDistanceInfo __cb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, String startPlace, String destination, java.util.Map<String, String> __ctx, Callback_ThirdPartyService_getDistanceInfo __cb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                 String startPlace, 
                                                 String destination, 
                                                 IceInternal.Functional_GenericCallback1<DistanceData> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                 String startPlace, 
                                                 String destination, 
                                                 IceInternal.Functional_GenericCallback1<DistanceData> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                 String startPlace, 
                                                 String destination, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<DistanceData> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                 String startPlace, 
                                                 String destination, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<DistanceData> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                  String startPlace, 
                                                  String destination, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<DistanceData> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDistanceInfo(cityName, startPlace, destination, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1UE<com.perspicace.gen.thirdparty.slice.DistanceData>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 ThirdPartyServicePrxHelper.__getDistanceInfo_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getDistanceInfo(String cityName, 
                                                  String startPlace, 
                                                  String destination, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDistanceInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDistanceInfo_name, __cb);
        try
        {
            __result.prepare(__getDistanceInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cityName);
            __os.writeString(startPlace);
            __os.writeString(destination);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DistanceData end_getDistanceInfo(Ice.AsyncResult __iresult)
        throws slice.BussinessServiceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDistanceInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(slice.BussinessServiceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DistanceData __ret = null;
            __ret = DistanceData.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDistanceInfo_completed(Ice.TwowayCallbackArg1UE<DistanceData> __cb, Ice.AsyncResult __result)
    {
        com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx __proxy = (com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx)__result.getProxy();
        DistanceData __ret = null;
        try
        {
            __ret = __proxy.end_getDistanceInfo(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getSharesList_name = "getSharesList";

    public SharesData[] getSharesList(SharesType type, String name)
        throws slice.BussinessServiceException
    {
        return getSharesList(type, name, null, false);
    }

    public SharesData[] getSharesList(SharesType type, String name, java.util.Map<String, String> __ctx)
        throws slice.BussinessServiceException
    {
        return getSharesList(type, name, __ctx, true);
    }

    private SharesData[] getSharesList(SharesType type, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws slice.BussinessServiceException
    {
        __checkTwowayOnly(__getSharesList_name);
        return end_getSharesList(begin_getSharesList(type, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name)
    {
        return begin_getSharesList(type, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name, java.util.Map<String, String> __ctx)
    {
        return begin_getSharesList(type, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name, Ice.Callback __cb)
    {
        return begin_getSharesList(type, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSharesList(type, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name, Callback_ThirdPartyService_getSharesList __cb)
    {
        return begin_getSharesList(type, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, String name, java.util.Map<String, String> __ctx, Callback_ThirdPartyService_getSharesList __cb)
    {
        return begin_getSharesList(type, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, 
                                               String name, 
                                               IceInternal.Functional_GenericCallback1<SharesData[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSharesList(type, name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, 
                                               String name, 
                                               IceInternal.Functional_GenericCallback1<SharesData[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSharesList(type, name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, 
                                               String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<SharesData[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSharesList(type, name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSharesList(SharesType type, 
                                               String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<SharesData[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSharesList(type, name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSharesList(SharesType type, 
                                                String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<SharesData[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSharesList(type, name, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1UE<com.perspicace.gen.thirdparty.slice.SharesData[]>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               ThirdPartyServicePrxHelper.__getSharesList_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getSharesList(SharesType type, 
                                                String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSharesList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSharesList_name, __cb);
        try
        {
            __result.prepare(__getSharesList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            SharesType.__write(__os, type);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public SharesData[] end_getSharesList(Ice.AsyncResult __iresult)
        throws slice.BussinessServiceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSharesList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(slice.BussinessServiceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            SharesData[] __ret;
            __ret = sharesDataSequenceHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSharesList_completed(Ice.TwowayCallbackArg1UE<SharesData[]> __cb, Ice.AsyncResult __result)
    {
        com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx __proxy = (com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx)__result.getProxy();
        SharesData[] __ret = null;
        try
        {
            __ret = __proxy.end_getSharesList(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getWeather_name = "getWeather";

    public SimpleWeatherData getWeather(String cityName, String date)
        throws slice.BussinessServiceException
    {
        return getWeather(cityName, date, null, false);
    }

    public SimpleWeatherData getWeather(String cityName, String date, java.util.Map<String, String> __ctx)
        throws slice.BussinessServiceException
    {
        return getWeather(cityName, date, __ctx, true);
    }

    private SimpleWeatherData getWeather(String cityName, String date, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws slice.BussinessServiceException
    {
        __checkTwowayOnly(__getWeather_name);
        return end_getWeather(begin_getWeather(cityName, date, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date)
    {
        return begin_getWeather(cityName, date, null, false, false, null);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date, java.util.Map<String, String> __ctx)
    {
        return begin_getWeather(cityName, date, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date, Ice.Callback __cb)
    {
        return begin_getWeather(cityName, date, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getWeather(cityName, date, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date, Callback_ThirdPartyService_getWeather __cb)
    {
        return begin_getWeather(cityName, date, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, String date, java.util.Map<String, String> __ctx, Callback_ThirdPartyService_getWeather __cb)
    {
        return begin_getWeather(cityName, date, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, 
                                            String date, 
                                            IceInternal.Functional_GenericCallback1<SimpleWeatherData> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getWeather(cityName, date, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, 
                                            String date, 
                                            IceInternal.Functional_GenericCallback1<SimpleWeatherData> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeather(cityName, date, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, 
                                            String date, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<SimpleWeatherData> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getWeather(cityName, date, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getWeather(String cityName, 
                                            String date, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<SimpleWeatherData> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeather(cityName, date, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getWeather(String cityName, 
                                             String date, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<SimpleWeatherData> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeather(cityName, date, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1UE<com.perspicace.gen.thirdparty.slice.SimpleWeatherData>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            ThirdPartyServicePrxHelper.__getWeather_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getWeather(String cityName, 
                                             String date, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getWeather_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getWeather_name, __cb);
        try
        {
            __result.prepare(__getWeather_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cityName);
            __os.writeString(date);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public SimpleWeatherData end_getWeather(Ice.AsyncResult __iresult)
        throws slice.BussinessServiceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getWeather_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(slice.BussinessServiceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            SimpleWeatherData __ret = null;
            __ret = SimpleWeatherData.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getWeather_completed(Ice.TwowayCallbackArg1UE<SimpleWeatherData> __cb, Ice.AsyncResult __result)
    {
        com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx __proxy = (com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx)__result.getProxy();
        SimpleWeatherData __ret = null;
        try
        {
            __ret = __proxy.end_getWeather(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getWeatherApiData_name = "getWeatherApiData";

    public WeatherData getWeatherApiData(String cityName)
        throws slice.BussinessServiceException
    {
        return getWeatherApiData(cityName, null, false);
    }

    public WeatherData getWeatherApiData(String cityName, java.util.Map<String, String> __ctx)
        throws slice.BussinessServiceException
    {
        return getWeatherApiData(cityName, __ctx, true);
    }

    private WeatherData getWeatherApiData(String cityName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws slice.BussinessServiceException
    {
        __checkTwowayOnly(__getWeatherApiData_name);
        return end_getWeatherApiData(begin_getWeatherApiData(cityName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName)
    {
        return begin_getWeatherApiData(cityName, null, false, false, null);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, java.util.Map<String, String> __ctx)
    {
        return begin_getWeatherApiData(cityName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, Ice.Callback __cb)
    {
        return begin_getWeatherApiData(cityName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getWeatherApiData(cityName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, Callback_ThirdPartyService_getWeatherApiData __cb)
    {
        return begin_getWeatherApiData(cityName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, java.util.Map<String, String> __ctx, Callback_ThirdPartyService_getWeatherApiData __cb)
    {
        return begin_getWeatherApiData(cityName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                   IceInternal.Functional_GenericCallback1<WeatherData> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getWeatherApiData(cityName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                   IceInternal.Functional_GenericCallback1<WeatherData> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeatherApiData(cityName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<WeatherData> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getWeatherApiData(cityName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<WeatherData> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeatherApiData(cityName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<WeatherData> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getWeatherApiData(cityName, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1UE<com.perspicace.gen.thirdparty.slice.WeatherData>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   ThirdPartyServicePrxHelper.__getWeatherApiData_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_getWeatherApiData(String cityName, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getWeatherApiData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getWeatherApiData_name, __cb);
        try
        {
            __result.prepare(__getWeatherApiData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cityName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public WeatherData end_getWeatherApiData(Ice.AsyncResult __iresult)
        throws slice.BussinessServiceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getWeatherApiData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(slice.BussinessServiceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            WeatherData __ret = null;
            __ret = WeatherData.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getWeatherApiData_completed(Ice.TwowayCallbackArg1UE<WeatherData> __cb, Ice.AsyncResult __result)
    {
        com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx __proxy = (com.perspicace.gen.thirdparty.slice.ThirdPartyServicePrx)__result.getProxy();
        WeatherData __ret = null;
        try
        {
            __ret = __proxy.end_getWeatherApiData(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ThirdPartyServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ThirdPartyServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ThirdPartyServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ThirdPartyServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ThirdPartyServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ThirdPartyServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ThirdPartyServicePrx.class, ThirdPartyServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::slice::ThirdPartyService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, ThirdPartyServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static ThirdPartyServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ThirdPartyServicePrxHelper result = new ThirdPartyServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
